"This calculation provides the required sample size per group for comparing two proportions. Enter the expected proportions for each group."
} else {
"This calculation provides the total sample size needed to detect the specified correlation coefficient with the given power and significance level."
}
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(pwr)
ui <- page_sidebar(
title = "Sample Size Calculator",
sidebar = sidebar(
selectInput("test_type", "Select Test Type",
choices = c("t-test (Two Sample)" = "t_test",
"Proportion Test" = "prop_test",
"Correlation Test" = "correlation")),
# Parameters for t-test
conditionalPanel(
condition = "input.test_type == 't_test'",
numericInput("mean1", "Mean of Group 1",
value = 10, step = 0.1),
numericInput("mean2", "Mean of Group 2",
value = 12, step = 0.1),
numericInput("sd_pooled", "Pooled Standard Deviation",
value = 4, min = 0.1, step = 0.1),
numericInput("power_t", "Statistical Power",
value = 0.8, min = 0.1, max = 0.99, step = 0.05),
numericInput("sig_level_t", "Significance Level (α)",
value = 0.05, min = 0.01, max = 0.1, step = 0.01)
),
# Parameters for proportion test
conditionalPanel(
condition = "input.test_type == 'prop_test'",
numericInput("prop1", "Proportion 1",
value = 0.5, min = 0, max = 1, step = 0.05),
numericInput("prop2", "Proportion 2",
value = 0.6, min = 0, max = 1, step = 0.05),
numericInput("power_p", "Statistical Power",
value = 0.8, min = 0.1, max = 0.99, step = 0.05),
numericInput("sig_level_p", "Significance Level (α)",
value = 0.05, min = 0.01, max = 0.1, step = 0.01)
),
# Parameters for correlation test
conditionalPanel(
condition = "input.test_type == 'correlation'",
numericInput("correlation", "Expected Correlation",
value = 0.3, min = -0.99, max = 0.99, step = 0.05),
numericInput("power_c", "Statistical Power",
value = 0.8, min = 0.1, max = 0.99, step = 0.05),
numericInput("sig_level_c", "Significance Level (α)",
value = 0.05, min = 0.01, max = 0.1, step = 0.01)
)
),
layout_columns(
fill = FALSE,
value_box(
title = "Required Sample Size",
value = textOutput("sample_size"),
theme = "primary"
),
value_box(
title = "Effect Size (Cohen's d)",
value = textOutput("cohens_d"),
theme = "secondary"
),
card(
card_header("Description"),
textOutput("description")
)
)
)
server <- function(input, output) {
# Calculate Cohen's d for t-test
cohens_d <- reactive({
if (input$test_type == "t_test") {
d <- abs(input$mean1 - input$mean2) / input$sd_pooled
return(d)
}
})
sample_size <- reactive({
if (input$test_type == "t_test") {
result <- pwr.t.test(d = cohens_d(),
power = input$power_t,
sig.level = input$sig_level_t,
type = "two.sample")
ceiling(result$n)  # n per group for t-test
} else if (input$test_type == "prop_test") {
h <- ES.h(input$prop1, input$prop2)  # Calculate effect size
result <- pwr.2p.test(h = h,
power = input$power_p,
sig.level = input$sig_level_p)
ceiling(result$n)  # n per group for proportion test
} else if (input$test_type == "correlation") {
result <- pwr.r.test(r = input$correlation,
power = input$power_c,
sig.level = input$sig_level_c)
ceiling(result$n)  # total n for correlation
}
})
output$sample_size <- renderText({
paste0(sample_size(), " participants",
if(input$test_type %in% c("t_test", "prop_test")) " per group" else "")
})
output$cohens_d <- renderText({
if (input$test_type == "t_test") {
sprintf("%.3f", cohens_d())
} else {
"N/A"
}
})
output$description <- renderText({
if (input$test_type == "t_test") {
paste0("This calculation provides the required sample size per group for a two-sample t-test. ",
"Cohen's d is calculated from the means and pooled standard deviation. ",
"Current effect size (d) = ", sprintf("%.3f", cohens_d()))
} else if (input$test_type == "prop_test") {
"This calculation provides the required sample size per group for comparing two proportions. Enter the expected proportions for each group."
} else {
"This calculation provides the total sample size needed to detect the specified correlation coefficient with the given power and significance level."
}
})
}
shinyApp(ui, server)
set.seed(1)
Mentored <- data.frame(Pre_1 = round(pmax(0, rnorm(100, mean=1.17, sd = .82)), 2),
During = round(pmin(4, pmax(0, rnorm(100, mean=2.6, sd = 1))), 2),
Post_1 = round(pmin(4, pmax(0, rnorm(100, mean=2.4, sd = 1))), 2),
Group = "Mentored")
Control <- data.frame(Pre_1 = round(pmax(0, rnorm(100, mean=1.07, sd = .78)), 2),
During = round(pmin(4, pmax(0, rnorm(100, mean=1.07, sd = 1))), 2),
Post_1 = round(pmin(4,pmax(0, rnorm(100, mean=1.07, sd = 1.28))), 2),
Group = "Control")
View(Control)
rm(list=ls())
shifts <- structure(list(PatientId = c("7391991", "7391992", "7391993",
"7391994", "7391995", "7391996", "7391997", "7391999", "7392991",
"7392992", "7392994", "7392995", "7392996", "7392998", "7392999",
"7392919", "7392911", "7392912", "7392913", "7392914", "7392915",
"7392916", "7392917", "7392918", "7392919", "7392929", "7392922",
"7392923", "7392924", "7392925", "7392926", "7394991", "7394992",
"7396991", "7396992", "7396993", "7396994", "7396995", "7396996",
"7396997", "7396998", "7397991", "7398991", "7398992", "7398993",
"7398994", "7398995", "7398996", "7398997", "7398998", "7399991",
"7399992", "7399993", "7399994", "7319991", "7319992", "7319993",
"7313991", "7313992", "7313993", "7313994", "7313995", "7316991",
"7316992", "7317991", "7318991"), Score = c(1.2, 0.8, 3, 3.2,
2.2, 0.6, 0.4, 0.2, 5.4, 1.8, 2, 4.2, 2.2, 1.4, 3.4, 3.2, 1.6,
2.2, 3, 3.2, 0, 0, 3.2, 2.8, 3.4, 3.4, 2, 0.4, 2.2, 0.2, 3, 0.8,
3.2, 1, 3.6, 0.4, 1.2, 1.2, 0.2, 2.4, 1.6, 1, 1.4, 3.8, 1.4,
3.2, 0.4, 0.8, 1.2, 0, 0.4, 0.8, 0.2, 0.2, 1.4, 2.2, 2, 2, 1.6,
0.6, 4.2, 0.4, 0.8, 0.2, 1.2, 0.2), ScoreBaseline = c(3.4, 4,
3, 2.4, 5, 2, 1.4, 1.8, 5, 2, 1.6, 4, 4, 3, 4, 3.2, 1.4, 3.4,
4.2, 3.4, 1.2, 0.4, 4, 2.8, 2.2, 6, 3.6, 2.8, 2.2, 1.4, 3.2,
1.4, 3, 1.2, 2.8, 0.6, 2.6, 3.8, 3.4, 2.6, 1.6, 4, 1.4, 2.8,
3.2, 2.6, 1.8, 2.6, 1.8, 3, 0, 1.4, 2.2, 1, 3.6, 2.4, 1.8, 3.8,
1.8, 5.4, 5, 1.6, 1.8, 1.2, 2.6, 2)), row.names = c(NA, -66L), Version = 3L, Date = structure(1698083583.12, tzone = "UTC", class = c("POSIXct",
"POSIXt")), class = "data.frame")
View(shifts)
View(shifts)
# ----------------------- Data preparation
library(tidyverse)
shifts %>%
mutate(change = Score - ScoreBaseline) %>%
pivot_longer(cols = c(ScoreBaseline, Score), names_to = "Timepoint", values_to = "Value") |>
mutate(Timepoint = factor(Timepoint,
levels = c("ScoreBaseline", "Score"),
labels = c("Baseline", "Week 8"))) %>%
mutate(change_type = factor(case_when(change > 0 ~ "increase",
change < 0 ~ "decrease",
change == 0 ~ "no change"),
levels = c("increase", "decrease", "no change"))) |>
mutate(MCID = factor(ifelse(abs(change) >= 0.5, "MCID", "nonMCID"),
levels = c("nonMCID", "MCID"),
ordered = TRUE)) -> scores_bas_w8
View(scores_bas_w8)
nonMCID
df_bands <- data.frame(xmin = -Inf,
xmax = Inf,
ymin = c(0, 0.749, 1.501),
ymax = c(0.75, 1.5, 6),
range = c("well", "partially", "not well"))
# ----------------------- Plotting
install.packages("gghalves")
library(gghalves)
library(ggnewscale)
scores_bas_w8 %>%
ggplot(aes(
x = Timepoint,
y = Value,
group = interaction(PatientId, MCID)
)) +
# # Draw the bands
# geom_rect(
#   data = df_bands,
#   aes(xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax, fill = range),
#   alpha = 0.32,
#   inherit.aes = FALSE
# ) +
# scale_fill_manual(
#   values = c("not well" = "#c00000", "partially" = "#00B0F0", "well" = "green3"),
#   name = "Asthma controlled: "
# ) +
# ggnewscale::new_scale_fill() +
# Draw the changes
geom_line(aes(col = change_type, linetype = MCID, linewidth = MCID)) +
geom_line(aes(col = change_type, linetype = MCID, linewidth = MCID)) +
scale_color_manual(
values = c("increase" = "red2", "decrease" = "green4", "no change" = "#3F4444"),
guide = guide_legend(override.aes = list(linewidth = 1))
) +
scale_linewidth_ordinal(
range = c(0.3, 0.6),
labels = c("MCID" = "|change ≥ 0.5|", "nonMCID" = "|change < 0.5|")
) +
scale_linetype_manual(
values = c("MCID" = "solid", "nonMCID" = "longdash"),
labels = c("MCID" = "|change ≥ 0.5|", "nonMCID" = "|change < 0.5|")
) +
# count observations - optional
geom_count(
aes(
size = after_stat(prop),
alpha = after_stat(prop),
group = factor(1)
),
fill = "gray50",
color = "gray50",
show.legend = FALSE
) + # I don't want these fractions to be printed, just shown
scale_size_area(
max_size = 5.5,
name = "Fraction of observations"
) +
scale_alpha(
range = c(0.6, 1),
guide = "none"
) +
# Draw boxplots - left and right
geom_half_boxplot(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = -0.13),
side = "r",
outlier.shape = NA,
center = FALSE,
errorbar.draw = FALSE,
width = .14,
size = 0.7,
col = "gray30"
) +
geom_half_boxplot(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = .13),
side = "l",
outlier.shape = NA,
center = FALSE,
errorbar.draw = FALSE,
width = .14,
size = 0.7,
col = "gray30"
) +
# Draw mean +- SD
stat_summary(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value, fill = "Mean ± SD"),
col = "black",
position = position_nudge(x = -0.18),
fun = mean
) +
stat_summary(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value, fill = "Mean ± SD"),
col = "black",
position = position_nudge(x = 0.18),
fun = mean
) +
stat_summary(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
col = "black",
position = position_nudge(x = -0.18),
fun.data = mean_sdl,
geom = "errorbar",
width = 0.02,
fun.args = list(mult = 1)
) +
stat_summary(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
col = "black",
position = position_nudge(x = 0.18),
fun.data = mean_sdl,
geom = "errorbar",
width = 0.02,
fun.args = list(mult = 1)
) +
# Draw densities - left and right
geom_half_violin(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = -0.15),
side = "l",
fill = "gray40",
alpha = 0.4,
col = NA
) +
geom_half_violin(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = .15),
side = "r",
fill = "gray40",
alpha = 0.4,
col = NA
) +
theme_bw() +
labs(
col = "Kind of change: ",
linetype = "Magnitude of change",
linewidth = "Magnitude of change",
fill = "Measures:"
) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
) +
labs(
title = "Change in XYZ Score Between Baseline and Week 8",
subtitle = paste0("Limited to ", nrow(scores_bas_w8) / 2, " paired observations")
) +
xlab(NULL) +
ylab("XYZ") +
theme(
axis.text = element_text(size = 13),
axis.title = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 11),
legend.key.size = unit(1, "line"),
legend.spacing.y = unit(0.3, "line")
)
scores_bas_w8 %>%
ggplot(aes(
x = Timepoint,
y = Value,
group = interaction(PatientId, MCID)
)) +
# # Draw the bands
geom_rect(
data = df_bands,
aes(xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax, fill = range),
alpha = 0.32,
inherit.aes = FALSE
) +
scale_fill_manual(
values = c("not well" = "#c00000", "partially" = "#00B0F0", "well" = "green3"),
name = "Asthma controlled: "
) +
ggnewscale::new_scale_fill() +
# Draw the changes
geom_line(aes(col = change_type, linetype = MCID, linewidth = MCID)) +
geom_line(aes(col = change_type, linetype = MCID, linewidth = MCID)) +
scale_color_manual(
values = c("increase" = "red2", "decrease" = "green4", "no change" = "#3F4444"),
guide = guide_legend(override.aes = list(linewidth = 1))
) +
scale_linewidth_ordinal(
range = c(0.3, 0.6),
labels = c("MCID" = "|change ≥ 0.5|", "nonMCID" = "|change < 0.5|")
) +
scale_linetype_manual(
values = c("MCID" = "solid", "nonMCID" = "longdash"),
labels = c("MCID" = "|change ≥ 0.5|", "nonMCID" = "|change < 0.5|")
) +
# count observations - optional
geom_count(
aes(
size = after_stat(prop),
alpha = after_stat(prop),
group = factor(1)
),
fill = "gray50",
color = "gray50",
show.legend = FALSE
) + # I don't want these fractions to be printed, just shown
scale_size_area(
max_size = 5.5,
name = "Fraction of observations"
) +
scale_alpha(
range = c(0.6, 1),
guide = "none"
) +
# Draw boxplots - left and right
geom_half_boxplot(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = -0.13),
side = "r",
outlier.shape = NA,
center = FALSE,
errorbar.draw = FALSE,
width = .14,
size = 0.7,
col = "gray30"
) +
geom_half_boxplot(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = .13),
side = "l",
outlier.shape = NA,
center = FALSE,
errorbar.draw = FALSE,
width = .14,
size = 0.7,
col = "gray30"
) +
# Draw mean +- SD
stat_summary(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value, fill = "Mean ± SD"),
col = "black",
position = position_nudge(x = -0.18),
fun = mean
) +
stat_summary(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value, fill = "Mean ± SD"),
col = "black",
position = position_nudge(x = 0.18),
fun = mean
) +
stat_summary(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
col = "black",
position = position_nudge(x = -0.18),
fun.data = mean_sdl,
geom = "errorbar",
width = 0.02,
fun.args = list(mult = 1)
) +
stat_summary(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
col = "black",
position = position_nudge(x = 0.18),
fun.data = mean_sdl,
geom = "errorbar",
width = 0.02,
fun.args = list(mult = 1)
) +
# Draw densities - left and right
geom_half_violin(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = -0.15),
side = "l",
fill = "gray40",
alpha = 0.4,
col = NA
) +
geom_half_violin(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = .15),
side = "r",
fill = "gray40",
alpha = 0.4,
col = NA
) +
theme_bw() +
labs(
col = "Kind of change: ",
linetype = "Magnitude of change",
linewidth = "Magnitude of change",
fill = "Measures:"
) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
) +
labs(
title = "Change in XYZ Score Between Baseline and Week 8",
subtitle = paste0("Limited to ", nrow(scores_bas_w8) / 2, " paired observations")
) +
xlab(NULL) +
ylab("XYZ") +
theme(
axis.text = element_text(size = 13),
axis.title = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 11),
legend.key.size = unit(1, "line"),
legend.spacing.y = unit(0.3, "line")
)
dat <- read.csv("https://raw.githubusercontent.com/nickbordeleau/QMSS/main/PartyData.csv")
View(dat)
install.packages("questionr")
library(questionr)
freq(dat$TP, cum = TRUE)
## Sample table
data(Titanic)
tab <- apply(Titanic, c(1,4), sum)
## Pearson residuals
chisq.residuals(tab)
## Standardized residuals
chisq.residuals(tab, std = TRUE)
## Raw residuals
chisq.residuals(tab, raw = TRUE)
