values = c("MCID" = "solid", "nonMCID" = "longdash"),
labels = c("MCID" = "|change ≥ 0.5|", "nonMCID" = "|change < 0.5|")
) +
# count observations - optional
geom_count(
aes(
size = after_stat(prop),
alpha = after_stat(prop),
group = factor(1)
),
fill = "gray50",
color = "gray50",
show.legend = FALSE
) + # I don't want these fractions to be printed, just shown
scale_size_area(
max_size = 5.5,
name = "Fraction of observations"
) +
scale_alpha(
range = c(0.6, 1),
guide = "none"
) +
# Draw boxplots - left and right
geom_half_boxplot(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = -0.13),
side = "r",
outlier.shape = NA,
center = FALSE,
errorbar.draw = FALSE,
width = .14,
size = 0.7,
col = "gray30"
) +
geom_half_boxplot(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = .13),
side = "l",
outlier.shape = NA,
center = FALSE,
errorbar.draw = FALSE,
width = .14,
size = 0.7,
col = "gray30"
) +
# Draw mean +- SD
stat_summary(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value, fill = "Mean ± SD"),
col = "black",
position = position_nudge(x = -0.18),
fun = mean
) +
stat_summary(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value, fill = "Mean ± SD"),
col = "black",
position = position_nudge(x = 0.18),
fun = mean
) +
stat_summary(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
col = "black",
position = position_nudge(x = -0.18),
fun.data = mean_sdl,
geom = "errorbar",
width = 0.02,
fun.args = list(mult = 1)
) +
stat_summary(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
col = "black",
position = position_nudge(x = 0.18),
fun.data = mean_sdl,
geom = "errorbar",
width = 0.02,
fun.args = list(mult = 1)
) +
# Draw densities - left and right
geom_half_violin(
data = . %>% filter(Timepoint == "Baseline"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = -0.15),
side = "l",
fill = "gray40",
alpha = 0.4,
col = NA
) +
geom_half_violin(
data = . %>% filter(Timepoint == "Week 8"),
aes(group = Timepoint, x = Timepoint, y = Value),
position = position_nudge(x = .15),
side = "r",
fill = "gray40",
alpha = 0.4,
col = NA
) +
theme_bw() +
labs(
col = "Kind of change: ",
linetype = "Magnitude of change",
linewidth = "Magnitude of change",
fill = "Measures:"
) +
theme(
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
) +
labs(
title = "Change in XYZ Score Between Baseline and Week 8",
subtitle = paste0("Limited to ", nrow(scores_bas_w8) / 2, " paired observations")
) +
xlab(NULL) +
ylab("XYZ") +
theme(
axis.text = element_text(size = 13),
axis.title = element_text(size = 14),
legend.text = element_text(size = 11),
legend.title = element_text(size = 11),
legend.key.size = unit(1, "line"),
legend.spacing.y = unit(0.3, "line")
)
dat <- read.csv("https://raw.githubusercontent.com/nickbordeleau/QMSS/main/PartyData.csv")
View(dat)
install.packages("questionr")
library(questionr)
freq(dat$TP, cum = TRUE)
## Sample table
data(Titanic)
tab <- apply(Titanic, c(1,4), sum)
## Pearson residuals
chisq.residuals(tab)
## Standardized residuals
chisq.residuals(tab, std = TRUE)
## Raw residuals
chisq.residuals(tab, raw = TRUE)
install.packages("installr")
library(installr)
library(installr)
installr()
installr()
installr()
library(installr)
installr()
library(installr)
installr()
installr()
pacman::p_load(tfrmt, dplyr, gt, tidyr)
data_demog
data_demog %>%
distinct(rowlbl1,grp)
tfrmt(
# specify columns in the data
group = c(rowlbl1,grp),
label = rowlbl2,
column = column,
param = param,
value = value,
sorting_cols = c(ord1, ord2)) %>%
print_to_gt(data_demog) %>%
tab_options(
container.width = 900
)
tfrmt(
# specify columns in the data
group = c("rowlbl1","grp"),
label = "rowlbl2",
column = "column",
param = "param",
value = "value",
sorting_cols = c("ord1", "ord2"),
# specify value formatting
body_plan = body_plan(
frmt_structure(group_val = ".default", label_val = ".default", frmt_combine("{n} {pct}",
n = frmt("xxx"),
pct = frmt_when("==100" ~ "",
"==0" ~ "",
TRUE ~ frmt("(xx.x %)")))),
frmt_structure(group_val = ".default", label_val = "n", frmt("xxx")),
frmt_structure(group_val = ".default", label_val = c("Mean", "Median", "Min","Max"), frmt("xxx.x")),
frmt_structure(group_val = ".default", label_val = "SD", frmt("xxx.xx")),
frmt_structure(group_val = ".default", label_val = ".default", p = frmt("")),
frmt_structure(group_val = ".default", label_val = c("n","<65 yrs","<12 months","<25"), p = frmt_when(">0.99" ~ ">0.99",
"<0.001" ~ "<0.001",
TRUE ~ frmt("x.xxx", missing = "")))
),
# remove extra cols
col_plan = col_plan(-grp,
-starts_with("ord") ),
# Specify column styling plan
col_style_plan = col_style_plan(
col_style_structure(align = c(".",","," "), col = c("Placebo", "Xanomeline Low Dose",
"Xanomeline High Dose", "Total", "p-value")),
col_style_structure(align = "left", col = c("rowlbl1","rowlbl2"))
),
# Specify row group plan
row_grp_plan = row_grp_plan(
row_grp_structure(group_val = ".default", element_block(post_space = " ")),
label_loc = element_row_grp_loc(location = "column")
)
) %>%
print_to_gt(data_demog) %>%
tab_options(
container.width = 900
)
demotab <- tfrmt(
# specify columns in the data
group = c("rowlbl1","grp"),
label = "rowlbl2",
column = "column",
param = "param",
value = "value",
sorting_cols = c("ord1", "ord2"),
# specify value formatting
body_plan = body_plan(
frmt_structure(group_val = ".default", label_val = ".default", frmt_combine("{n} {pct}",
n = frmt("xxx"),
pct = frmt_when("==100" ~ "",
"==0" ~ "",
TRUE ~ frmt("(xx.x %)")))),
frmt_structure(group_val = ".default", label_val = "n", frmt("xxx")),
frmt_structure(group_val = ".default", label_val = c("Mean", "Median", "Min","Max"), frmt("xxx.x")),
frmt_structure(group_val = ".default", label_val = "SD", frmt("xxx.xx")),
frmt_structure(group_val = ".default", label_val = ".default", p = frmt("")),
frmt_structure(group_val = ".default", label_val = c("n","<65 yrs","<12 months","<25"), p = frmt_when(">0.99" ~ ">0.99",
"<0.001" ~ "<0.001",
TRUE ~ frmt("x.xxx", missing = "")))
),
# remove extra cols
col_plan = col_plan(-grp,
-starts_with("ord") ),
# Specify column styling plan
col_style_plan = col_style_plan(
col_style_structure(align = c(".",","," "), col = c("Placebo", "Xanomeline Low Dose",
"Xanomeline High Dose", "Total", "p-value")),
col_style_structure(align = "left", col = c("rowlbl1","rowlbl2"))
),
# Specify row group plan
row_grp_plan = row_grp_plan(
row_grp_structure(group_val = ".default", element_block(post_space = " ")),
label_loc = element_row_grp_loc(location = "column")
)
) %>%
print_to_gt(data_demog) %>%
tab_options(
container.width = 900
)
demotab
demotab |> gtsave("tab_1.docx")
getwd()
# crosstabs
CO2_tab <- CO2 %>%
tbl_cross(
row = Type,
col = Treatment,
percent = "cell"
) %>%
add_p() %>%
bold_labels()
library(tidyverse)
library(gtsummary)
library(flextable)
library(gt)
library(table1)
data(CO2)
head(CO2)
# crosstabs
CO2_tab <- CO2 %>%
tbl_cross(
row = Type,
col = Treatment,
percent = "cell"
) %>%
add_p() %>%
bold_labels()
CO2_tab
CO2_tab |>
as_gt() |>
gt::gtsave(filename = "CO2_table.docx")
comparison_data <- data.frame(
Feature = c(
"Primary Purpose",
"Table Types",
"Learning Curve",
"Statistical Features",
"Customization Level",
"Data Input",
"Common Use Cases",
"Dependencies",
"Output Format",
"Formula Interface"
),
gt = c(
"General table creation and formatting",
"Any type of data table",
"Steeper - requires more code for basic tables",
"Basic, requires manual implementation",
"High - complete control over every aspect",
"Data frames, matrices, tibbles",
"Custom reports, data presentation, publication tables",
"Standalone package",
"HTML, RTF, PDF, Word",
"No built-in formula interface"
),
gtsummary = c(
"Statistical and clinical summary tables",
"Summary statistics, regression results, comparison tables",
"Gentler - pre-built functions for common tables",
"Rich statistical functions built-in",
"Medium - preset formats with some customization",
"Data frames with focus on statistical data",
"Clinical research, statistical reports, regression summaries",
"Built on top of gt package",
"Same as gt, optimized for statistical reporting",
"Supports formula interface for models"
)
)
comparison_table <- comparison_data %>%
gt() %>%
tab_header(
title = "Comparison of gt vs gtsummary Packages",
subtitle = "Feature-by-Feature Comparison"
) %>%
tab_style(
style = list(
cell_fill(color = "#f0f0f0"),
cell_text(weight = "bold")
),
locations = cells_column_labels()
) %>%
tab_style(
style = list(
cell_fill(color = "#e6e6ff"),
cell_text(weight = "bold")
),
locations = cells_column_labels(columns = gt)
) %>%
tab_style(
style = list(
cell_fill(color = "#ffe6e6"),
cell_text(weight = "bold")
),
locations = cells_column_labels(columns = gtsummary)
) %>%
cols_width(
Feature ~ px(200),
gt ~ px(300),
gtsummary ~ px(300)
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(columns = Feature)
)
comparison_data <- data.frame(
Feature = c(
"Primary Purpose",
"Table Types",
"Learning Curve",
"Statistical Features",
"Customization Level",
"Data Input",
"Common Use Cases",
"Dependencies",
"Output Format",
"Formula Interface"
),
gt = c(
"General table creation and formatting",
"Any type of data table",
"Steeper - requires more code for basic tables",
"Basic, requires manual implementation",
"High - complete control over every aspect",
"Data frames, matrices, tibbles",
"Custom reports, data presentation, publication tables",
"Standalone package",
"HTML, RTF, PDF, Word",
"No built-in formula interface"
),
gtsummary = c(
"Statistical and clinical summary tables",
"Summary statistics, regression results, comparison tables",
"Gentler - pre-built functions for common tables",
"Rich statistical functions built-in",
"Medium - preset formats with some customization",
"Data frames with focus on statistical data",
"Clinical research, statistical reports, regression summaries",
"Built on top of gt package",
"Same as gt, optimized for statistical reporting",
"Supports formula interface for models"
)
)
comparison_table <- comparison_data  |>
gt()  |>
tab_header(
title = "Comparison of gt vs gtsummary Packages",
subtitle = "Feature-by-Feature Comparison"
)  |>
tab_style(
style = list(
cell_fill(color = "#f0f0f0"),
cell_text(weight = "bold")
),
locations = cells_column_labels()
)  |>
tab_style(
style = list(
cell_fill(color = "#e6e6ff"),
cell_text(weight = "bold")
),
locations = cells_column_labels(columns = gt)
)  |>
tab_style(
style = list(
cell_fill(color = "#ffe6e6"),
cell_text(weight = "bold")
),
locations = cells_column_labels(columns = gtsummary)
)  |>
cols_width(
Feature ~ px(200),
gt ~ px(300),
gtsummary ~ px(300)
)  |>
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(columns = Feature)
)
comparison_data <- data.frame(
Feature = c(
"Primary Purpose",
"Table Types",
"Learning Curve",
"Statistical Features",
"Customization Level",
"Data Input",
"Common Use Cases",
"Dependencies",
"Output Format",
"Formula Interface"
),
gt = c(
"General table creation and formatting",
"Any type of data table",
"Steeper - requires more code for basic tables",
"Basic, requires manual implementation",
"High - complete control over every aspect",
"Data frames, matrices, tibbles",
"Custom reports, data presentation, publication tables",
"Standalone package",
"HTML, RTF, PDF, Word",
"No built-in formula interface"
),
gtsummary = c(
"Statistical and clinical summary tables",
"Summary statistics, regression results, comparison tables",
"Gentler - pre-built functions for common tables",
"Rich statistical functions built-in",
"Medium - preset formats with some customization",
"Data frames with focus on statistical data",
"Clinical research, statistical reports, regression summaries",
"Built on top of gt package",
"Same as gt, optimized for statistical reporting",
"Supports formula interface for models"
)
)
comparison_table <- comparison_data  |>
gt()  |>
tab_header(
title = "Comparison of gt vs gtsummary Packages",
subtitle = "Feature-by-Feature Comparison"
)  |>
tab_style(
style = list(
cell_fill(color = "#f0f0f0"),
cell_text(weight = "bold")
),
locations = cells_column_labels()
)  |>
tab_style(
style = list(
cell_fill(color = "#e6e6ff"),
cell_text(weight = "bold")
),
locations = cells_column_labels(columns = gt)
)  |>
tab_style(
style = list(
cell_fill(color = "#ffe6e6"),
cell_text(weight = "bold")
),
locations = cells_column_labels(columns = gtsummary)
)  |>
cols_width(
Feature ~ px(200),
gt ~ px(300),
gtsummary ~ px(300)
)  |>
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(columns = Feature)
)
comparison_table
